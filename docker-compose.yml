services:
    # PostgreSQL Database
    postgres:
        image: postgres:15-alpine
        restart: unless-stopped
        environment:
            POSTGRES_DB: image_gallery
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: SecurePass123!MyGallery
        volumes:
            - postgres_data:/var/lib/postgresql/data
        ports:
            - "5433:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 5s
            retries: 5

    # Backend API Server
    backend:
        build:
            context: ./server
            dockerfile: Dockerfile
        restart: unless-stopped
        environment:
            NODE_ENV: production
            DATABASE_URL: postgresql://postgres:SecurePass123!MyGallery@postgres:5432/image_gallery
            JWT_SECRET: MyVerySecureJWTSecretKey2024!ForImageGalleryApp#WithRandomChars
            MASTER_KEY_GCM: abcdef1234567890ABCDEF1234567890
            PORT: 5000
        ports:
            - "5000:5000"
        volumes:
            - uploads_data:/app/uploads
        depends_on:
            postgres:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
            interval: 30s
            timeout: 10s
            retries: 3

    # Frontend Client
    frontend:
        build:
            context: ./client
            dockerfile: Dockerfile
        restart: unless-stopped
        ports:
            - "80:80"
        depends_on:
            - backend
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:80"]
            interval: 30s
            timeout: 10s
            retries: 3

volumes:
    postgres_data:
        driver: local
    uploads_data:
        driver: local

networks:
    default:
        driver: bridge
